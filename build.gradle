/*
 * Copyright (c) 2020 CodeHead Systems. All rights reserved
 */
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.google.com" } // Google's Maven repository
        gradlePluginPortal() // was jcenter() which is dying
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'org.gretty:gretty:3.0.2'
    }
}

plugins {
    id 'java-library'
    id 'jacoco'
    id 'idea'
    id 'signing'
    id 'maven-publish'
}
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}
repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()  // was jcenter() which is dying
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://s3-us-west-2.amazonaws.com/dynamodb-local/release/" }
}
group 'com.codeheadsystems'
version '1.0.1-SNAPSHOT'
ext {
    appName = "statemachine"
}

configurations {
    project.archivesBaseName = "${appName}"
    jar.archiveBaseName = "${appName}"
}

test {
    useJUnitPlatform() // needed for junit5
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dagger/**.class',
                    '**/Dagger*Builder.class',
                    '**/*Exception.class',
                    '**/*Module.class',
                    '**/*_Factory.class',
                    '**/*_Factory.*class',
                    '**/*InstanceHolder.class',
                    '**/*_Factory$InstanceHolder.class'
            ])
        }))
    }
}
def excludeFiles = [
        '**.dagger.**',
        '**.Dagger*Builder',
        '**.*Exception',
        '**.*Module',
        '**.*_Factory',
        '**.*_Factory*',
        '**.InstanceHolder',
        '**.*_Factory$InstanceHolder'
]

// If you want to override, use this in your package and set. This is the low bar.
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            excludes = excludeFiles
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            excludes = excludeFiles
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}

jacocoTestReport.finalizedBy jacocoTestCoverageVerification

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = appName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'statemachine'
                description = 'Library for working with state machines'
                url = 'https://github.com/wolpert/statemachine'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'wolpert'
                        name = 'Ned Wolpert'
                        email = 'ned.wolpert@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wolpert/statemachine.git'
                    developerConnection = 'scm:git:ssh://github.com/wolpert/statemachine.git'
                    url = 'https://github.com/wolpert/statemachine/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = "ossrh"
            credentials(PasswordCredentials)
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
dependencies {
    implementation(libs.jackson.core)
    implementation(libs.jackson.databind)
    implementation(libs.jackson.annotations)
    implementation(libs.jackson.datatype.jdk8)
    implementation(libs.guava)
    implementation(libs.commons.io)
    implementation(libs.metrics.core)
    implementation("javax.inject:javax.inject:1")
    implementation(libs.slf4j.api)

    implementation(libs.immutables.value.annotations)
    annotationProcessor(libs.immutables.value)

    implementation(libs.dagger)
    annotationProcessor(libs.dagger.compiler)


    // Use JUnit Jupiter Engine for testing.
    testImplementation "com.codeheadsystems:codehead-test:1.0.3"

    testImplementation(libs.logback.classic)
    testImplementation(libs.logback.core)
    testImplementation(libs.assertj.core)
    testImplementation(libs.junit.jupiter.engine)
    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.junit.jupiter.params)
    testImplementation(libs.mockito.junit.jupiter)
    testImplementation(libs.mockito.core)
}
